{
  "hash": "3b2f6edbdf385f231a741e5252ad407b",
  "result": {
    "markdown": "---\ntitle: \"Interactivity and immediate feedback with learnr\"\nsubtitle: \"rstudio::conf(2022) <br> Designing the data science classroom\"\nauthor: \"Mine √áetinkaya-Rundel\"\nfooter: \"[üîó rstd.io/teach-ds-conf22](https://rstd.io/teach-ds-conf22)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: ../slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    center: true\nexecute:\n  freeze: auto\n---\n\n\n# In progress\n\n::: callout-warning\nThese slides are currently being designed and built.\n:::\n\n# What?\n\n\n---\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/learnr-first-look.png){width=1348}\n:::\n:::\n\n---\n\n\n# Why?\n\n\n## Within a course\n\n-   Flipped classroom:\n    -   Assign a learnr tutorial, including narrative and implementation in R that students can practice with, before introducing a concept in class\n    -   Cover the concept in class (quicker)\n    -   Allocate the time saved to hands on exercises in class\n-   Lecture follow-up\n    -   Provide the same content from the lecture as follow up exercises\n-   Lab exercises / assignments\n\n\n## Self learning\n\n-   Learn by doing\n-   Package tutorials\n-   Workshop follow ups\n\n\n# How?\n\n\n## Getting started\n\nFollow along options:\n\n-   Local:\n\n    -   In RStudio, install and load the **learnr** and **sortable** packages\n    -   File ‚ûù New File ‚ûù R Markdown... ‚ûù From template ‚ûù Interactive Tutorial\n\n-   Cloud: Go to the workspace for this course and start the assignment called **07 - Learnr**.\n\n-   Deployed tutorial: https://gallery.shinyapps.io/tutorial-demo/\n\n\n## Sharing with students\n\n-   You could share the R Markdown (and all accompanying files) but that's probably not what you want to do...\n\n-   Deploy on\n\n    -   shinapps.io\n    -   RStudio Connect (free for academic use)\n\n\n# How else?\n\n\n## Code checking\n\n-   No built in code checking feature, but hooks for using other packages for code checking\n\n-   **gradethis** is furthest along: https://github.com/rstudio-education/gradethis\n\n\n## Recording events\n\n-   Recording events like exercise and question submissions, requests for hints/solutions, etc.\n-   This is possible with learnr, though not very simple\n-   With other R tools that allow for writing out to spreadsheets (e.g. Google Sheets) and building dashboards (e.g. shinydashboard) it's possible to build a dashboard for your class where you can track their progress and learn from what they're struggling with\n\n\n## A simpler hack: \"Minute paper\"\n\nAdd a link at the end of your tutorial to a Google (or other) form\n\n-   *Write about one or two questions you didn't get right initially but were able to solve after a few tries. What was difficult about them? What did you ultimately learn?*\n\nOR\n\n-   *If you got every single question correct on the first try, write one question you would still like clarified on the topics covered in this quiz.*\n\n\n.your-turn\\[ Create a tutorial with three questions: one multiple choice, one code, and one sortable / parsons question. It's of course ok if each question requires some code, but this is not required.\\]\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}