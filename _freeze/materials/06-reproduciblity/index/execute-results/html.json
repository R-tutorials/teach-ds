{
  "hash": "9b16ca2dea0b828fd309cfac9dc44748",
  "result": {
    "markdown": "---\ntitle: \"Reproducible workflows: Quarto, Git, GitHub\"\nsubtitle: \"rstudio::conf(2022) <br> Designing the data science classroom\"\nauthor: \"Mine √áetinkaya-Rundel\"\nfooter: \"[üîó rstd.io/teach-ds-conf22](https://rstd.io/teach-ds-conf22)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: ../slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    center: true\nexecute:\n  freeze: auto\n---\n\n::: {.cell}\n\n:::\n\n\n# In progress\n\n::: callout-warning\nThese slides are currently being designed and built.\n:::\n\n## Why Git + GitHub?\n\n-   **Version control:** Lots of mistakes along the way, need ability to revert\n-   **Collaboration:** Platform that removes barriers to well documented collaboration\n-   **Accountability:** Transparent commit history\n-   **Early introduction:**\n    -   Mastery takes time, earlier start the better\n    -   Marketability in industry\n\n## Goals for version control\n\n-   Centralize the distribution (and collection) of all student assignments\n\n-   Enable students to work collaboratively\n\n-   Make Git & GitHub part of student workflow\n\n    -   Version control is a best practice for reproducible research\n    -   Widely used in industry and academia\n    -   Publish / share work\n\n# GitHub as your Learning Management System\n\n## Basic Structure\n\nOn Github\n\n-   1 organization per class\n\n-   1 repo per (student or team) per assignment\n\n-   Student and team repos all private by default\n\n## Setting up a course\n\n1.  Create a <u>free</u> course organization on GitHub: [github.com/organizations/new](https://github.com/organizations/new)\n2.  Request teacher benefits: [education.github.com/discount](https://education.github.com/discount)\n3.  Add organization to GitHub Classroom: [classroom.github.com](https://classroom.github.com)\n4.  Invite students to organization\n5.  Create assignment(s)\n6.  Collect assignments(s)\\*\\*\n7.  Grade assignment(s)\\*\\*\n\n## 1Ô∏è‚É£ Create course organization\n\nSelect the option for a <u> free</u> course organization.\n\n![](images/org-create.png){fig-alt=\"Screenshot of page to create GitHub organization.\" fig-align=\"center\" width=\"603\"}\n\n## 2Ô∏è‚É£ Request teacher benefits\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/teacher-benefits-2.png){fig-alt=\"Screenshot of GitHub teacher benefits application.\" width=\"976\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/teacher-benefits-3.png){fig-alt=\"Screenshot of ID requirement in GitHub teacher benefits application.\" width=\"1557\"}\n:::\n:::\n\n## Required information\n\nYou will need to provide the following to request teacher benefits:\n\n-   A brief description of how you plan to use GitHub\n\n-   Establishing connection to an academic institution by verifying with a school-issued email address + school ID or some other proof of academic affliation\n\n-   Information about the school - link to website, address, etc.\n\nVerification is manual and can take up to a few days.\n\n## 3Ô∏è‚É£ Add organization to GitHub Classroom\n\nClick **New Classroom** and select the GitHub organization.\n\n![](images/github-classroom.png){fig-alt=\"Screenshot of GitHub classroom set up\" fig-align=\"center\"}\n\nYou can skip the remaining set up steps for now.\n\n## 4Ô∏è‚É£ Invite students\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/org-people.png){fig-alt=\"Screenshot of people in GitHub org.\" width=\"1178\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/org-invite-2.png){fig-alt=\"Screenshot of GitHub org invite options.\"}\n:::\n:::\n\n## Member Privileges\n\n![](images/member-priv1.png){fig-align=\"center\"}\n\n## Member Privileges (cont.)\n\n![](images/member-priv2.png){fig-align=\"center\"}\n\n## Member Privileges (cont.)\n\n![](images/member-priv3.png)\n\n# Doing things with the GitHub UI could get tedious...\n\n# üì¶ ghclass\n\n## üì¶ ghclass\n\n### Tools for managing github class organization accounts\n\n-   Made for instructors who use GitHub for class management, e.g. assignments distributed via GitHub repos\n-   The package assumes that you're an R user, and you probably teach R as well, though that's not a requirement since this package is all about setting up repositories with the right permissions, not what your students put in those repositories.\n\n## Installation\n\nUse the code below to install **ghclass**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ghclass\")\n```\n:::\n\n\n<br>\n\nUse the code below to load **ghclass**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ghclass)\n```\n:::\n\n\n## Collect data from students\n\n-   Need students' GitHub usernames at a minimum\n\n-   Recommend collecting emails, as students might make a typo in their GitHub username\n\n## Prior to collecting data...\n\nYou need to instruct students to create GitHub accounts\n\n-   Consider data privacy rules of institution / country (e.g. you may need to enter a data protection agreement for GDPR compliance)\n\n-   Give some guidance for choosing a username\n\n    -   See \"Username Advice\" on *Happy Git with R*: [happygitwithr.com/github-acct.html](https://happygitwithr.com/github-acct.html)\n\n-   Can have students choose and submit username as an in-class activity during the first week of classes.\n\n## Behind the scenes: GitHub tokens\n\n`ghclass` uses the GitHub API to interact with your course organization and repos - the API verifies your identity using a personal access token which must be created and saved in such a way that `ghclass` can find and use it.\n\n-   Create token at [github.com/settings/tokens](https://github.com/settings/tokens)\n-   Once created, assign the token to `GITHUB_PAT` as an environmental variable\n    -   `usethis::edit_r_environ()`\n    -   `GITHUB_PAT=\"alphanumeric string of your GitHub token\"`\n    -   Save, close, restart R for changes to take effect\n\n## Behind the scenes: GitHub tokens - UPDATE THIS PROCESS\n\n-   If the token is found and works correctly the following code should run without error\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngithub_test_token()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n‚úî Your GitHub PAT authenticated correctly.\n```\n:::\n:::\n\n\n-   If instead the token is invalid or not found, you will see something like the following\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngithub_test_token(\"MADE_UP_TOKEN\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n‚úñ Your GitHub PAT failed to authenticate.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n‚îî‚îÄGitHub API error (401): \n  ‚îú‚îÄ API message: Bad credentials\n  ‚îî‚îÄ API docs: https://docs.github.com/rest\n```\n:::\n:::\n\n\n# Inviting students\n\n## Invite students\n\n-   This will generate an email to students.\n-   Instruct students to check their email and follow the instructions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norg <- \"design-ds-class\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroster <- read_csv(\"SURVEY RESPONSES.csv\")\norg_invite(org = org, user = roster$username)\n```\n:::\n\n\n    ## ‚úî Invited user 'minebotmine' to org 'design-ds-class'.\n    ## ‚úî Invited user 'rundel' to org 'design-ds-class'.\n\n## Check member status\n\n-   Who is already in?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"aaron-gilbreath\"       \"bioboot\"               \"Cghlewis\"             \n [4] \"EricJC24\"              \"gabrielodom\"           \"gavago\"               \n [7] \"gavinfay\"              \"geoffsaw\"              \"jetsetbaxter\"         \n[10] \"KatherineCox\"          \"kavan-econ\"            \"matackett\"            \n[13] \"Mears-UFL\"             \"melindahiggins2000\"    \"mine-cetinkaya-rundel\"\n[16] \"murraycadzow\"          \"paideia-atl\"           \"paigerios68\"          \n[19] \"staceyhancock\"         \"thereseanders\"         \"timothydobbins\"       \n[22] \"VanjaRoz\"              \"woon-yuen\"             \"zamorarr\"             \n```\n:::\n:::\n\n\n-   Who still didn't accept their invitations?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\ncharacter(0)\n```\n:::\n:::\n\n\n# Creating assignments\n\n## Creating assignments - big picture\n\n-   Create a starter repo, keep it private and make it a template\n-   Clone the repo and add any starter files (template Qmd, data, instructions, etc.)\n-   Commit and push your changes to the repo\n-   Use the `org_create_assignment()` function to create copies of the starter repo with correct permissions for each of your students (or teams)\n\n## Creating your starter repo\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/starter-repo-create.png){width=741}\n:::\n:::\n\n\n## Make your starter repo a template\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/starter-repo-make-template.png){width=1020}\n:::\n:::\n\n\n## Prepare your starter repo\n\n-   Clone it locally\n-   Add any necessary files\n-   Commit and push\n\n<br>\n\n\\[DEMO\\]\n\n## Create assignments\n\n\n::: {.cell}\n\n```{.r .cell-code}\norg_create_assignment(\n  org = org,\n  repo = paste0(\"hw-01-airbnb-edi-\", roster$username),\n  user = roster$username,\n  source_repo = paste0(org, \"/hw-01-airbnb-edi\")\n)\n```\n:::\n\n\n<br>\n\n\\[DEMO\\]\n\n.your-turn\\[ - Go to the course organisation on GitHub: [github.com/design-ds-class](https://github.com/design-ds-class) - Locate your HW 01 and read through the Getting started section and follow the instructions. - Then, go through the Hello Git and Warm up sections as well. - Finally, add your answer to Question 1, and commit and push again.\\]\n\n-   If there is no GitHub repo created for you for this assignment, let me know.\n-   Clone using the HTTPS link, and let me know if\\\n    you have 2-factor authentication enabled on\\\n    GitHub (this complicates things!)\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_62db3e86\" style=\"right:0;bottom:0;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Options for giving feedback on GitHub\n\n-   Use the GitHub UI to add issues to each student's repo\n\n-   Clone student repos locally and reproduce their work prior to giving feedback by adding issues on the GitHub UI\n\n\n::: {.cell}\n\n:::\n\n\n-   Use the `issue_create()` function to post issues to all repos at once\n    -   Add a column for the repo name in `org/repo` format to roster\n    -   Add a column for feedback\n    -   \\[DEMO\\]\n\n## Get big picture stats for an assignment\n\n\n::: {.cell}\n\n:::\n\n\n<br>\n\n\\[DEMO\\]\n\n## Create team assignments\n\nFirst, we'll make up some teams\n\n\n::: {.cell}\n\n:::\n\n\n<br>\n\n\\[DEMO\\]\n\n.your-turn\\[ - Go to the course organisation on GitHub: [github.com/design-ds-class](https://github.com/design-ds-class) - Locate your Lab 03 and read through the Getting started section and follow the instructions with your team members.\\]\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_62db3bc4\" style=\"right:0;bottom:0;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\nclass: middle, inverse\n\n# Giving feedback\n\n## More on giving feedback in issues\n\n-   Instructors (and TAs) can view all repositories within the course organization.\n-   Use specific line references. \\[DEMO\\]\n-   Make sure to `@` mention the student so that they are notified when an issue is opened.\n-   You might want to consider keeping points out of issues.\n\n## Peer review\n\n-   Once an assignment is completed you can let other students/teams into a repository and they can provide peer review.\n\n-   Peer review is an incredibly effective learning experience for both the reviewers and the reviewees, however it does require coordination and being able to carve out sufficient time in the course schedule.\n\n-   Tip: Do not solely count on peer review for feedback as some reviewers might be less diligent than others. Teams reviewing teams, as opposed to individual reviewing individuals, might address this issue partially.\n\nSee the [Peer review with ghclass vignette](https://rundel.github.io/ghclass/articles/peer.html) for more.\n\n## Pull requests\n\n-   Another option is to open pull requests for your students' work where you directly edit their work and ask them to approve the edits.\n\n-   This can be effective as students will see your corrections and review them before accepting them.\n\n-   However this also does mean that you're directly correcting their work as opposed to giving them higher level instructions on how to correct it.\n\nMore on this in the next module...\n\n.your-turn\\[ **Now you're the instructor:**\\]\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"countdown\" id=\"timer_62db3c15\" style=\"right:0;bottom:0;\" data-warnwhen=\"0\">\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n:::\n:::\n\n\n## Git + GitHub lessons learned\n\n-   If you plan on using git in class, start on day one, don't wait until the \"right time\"\n-   First assignment should be individual, not team based to avoid merge conflicts\n-   Students need to remember to pull before starting work\n-   Impossible (?) to avoid shell intervention every once in a while\n-   Remind students on that future projects should go on GitHub with PI approval\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.3.5/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.3.5/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}