{
  "hash": "89801c63ea80184cfe395aaba36bea42",
  "result": {
    "markdown": "---\ntitle: \"Making a data package\"\nsubtitle: \"rstudio::conf(2022) <br> Designing the data science classroom\"\nauthor: \"Mine Ã‡etinkaya-Rundel\"\nfooter: \"[ðŸ”— rstd.io/teach-ds-conf22](https://rstd.io/teach-ds-conf22)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: ../slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:\n      width: 200\n---\n\n\n## Goal\n\n-   To make a simple data package, but not to teach all of package development.\n-   To use package development best practices, but not to teach all best practices associated with package development (e.g., we won't cover testing).\n\n## Demo: Making a data package {.small}\n\n1.  Check if a package name is available with `available::available()`\n2.  Create the package with `usethis::create_package()`\n\n::: cloud\n{{< fa cloud >}} RStudio Cloud > Module 7 - Data package\n:::\n\n3.  Create a `data-raw` folder for data prep and properly ignore it from package building with `usethis::use_data_raw()`.\n    -   In the folder, create a folder called `weather`, put `weather.R` and [`weather.csv`](weather.csv).\n    -   Load, clean, and save data in `weather.R`.\n    -   Check with `devtools::load_all()`.\n4.  Create a documentation file with `usethis::use_r(\"weather\")`.\n    -   Go to [https://r-pkgs.org/data.html#documenting-data to copy-paste](https://r-pkgs.org/data.html#documenting-data%20to%20copy-paste)a template.\n    -   Write the documentation.\n    -   Check with `devtools::document()`, `devtools::load_all()`, `?weather`.\n\n## Demo (continued): Making a data package {.small}\n\n5.  Start tracking with version control: `usethis::use_git()`, then `use_github(\"pkgname\")`.\n6.  Add a README with `usethis::use_readme_rmd()`. Write some info, knit, commit, and push.\n7.  Update the `DESCRIPTION` file and `usethis::use_gpl3_license()`.\n8.  Create a pkgdown website with `usethis::use_pkgdown()`, build the site with `devtools::build_site()`.\n9.  Publish the site with `usethis::use_github_pages()`, then `use_github_action(name = \"usweather\")`. Check the action running on the repo and view your pkgdown website.\n\n## Your turn: Add another dataset\n\n::: cloud\n{{< fa cloud >}} RStudio Cloud > Module 7 - Data package\n:::\n\n::: appex\nAdd a new dataset: [`cities.csv`](cities.csv).\nDocument it to the best of your ability.\nThe data source is Wikipedia.\n:::\n\n::: share\n{{< fa user-group >}} Work with your neighbor throughout this process. You might also choose to pair program, where only one of you write code and the other navigates.\n:::\n\n## Demo: Adding a tutorial\n\n1.  Add a tutorial with `usethis::use_tutorial(\"explore-usweather\", title = \"Exploring weather in US cities\")`.\n2.  Edit the tutorial to load this package and confirm that the datasets are accessible to the code chunks.\n3.  Open a new project, install the package from GitHub with `devtools::install_github(\"YOUR_GITHUB_USERNAME/usweather\")`. Confirm that the tutorial is accessible in the Tutorials pane.\n\n## Your turn: Add a hex logo\n\n\\[Time permitting\\]\n\n::: cloud\n{{< fa cloud >}} RStudio Cloud > Module 7 - Data package\n:::\n\n::: appex\nDownload [this hex logo](usweather.png) and add it to the package website.\nTake a look at the [**usethis** documentation](https://usethis.r-lib.org/) for functions that can help you place the file in the right location.\n:::\n\n::: share\n{{< fa user-group >}} Work with your neighbor throughout this process. You might also choose to pair program, where only one of you write code and the other navigates.\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}