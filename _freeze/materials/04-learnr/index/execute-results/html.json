{
  "hash": "ac0844f249a5777ef132c878dd3d9d52",
  "result": {
    "markdown": "---\ntitle: \"Interactivity and immediate feedback with learnr\"\nsubtitle: \"rstudio::conf(2022) <br> Designing the data science classroom\"\nauthor: \"Maria Tackett\"\nfooter: \"[üîó rstd.io/teach-ds-conf22](https://rstd.io/teach-ds-conf22)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: ../slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    center: true\nexecute:\n  freeze: auto\n---\n\n\n# In progress\n\n::: callout-warning\nThese slides are currently being designed and built.\n:::\n\n# What?\n\n------------------------------------------------------------------------\n\n## Parts of a tutorial \n\n![*Source: [minecr.shinyapps.io/dsbox-01-edibnb](https://minecr.shinyapps.io/dsbox-01-edibnb/)*](images/learnr-example.png)\n\n# Why?\n\n## Within a course\n\n-   In a flipped classroom\n    -   Assign a learnr tutorial that students can practice with before introducing a concept in class\n    -   Cover the concept in class (quicker)\n    -   Allocate the time saved to hands on exercises in class\n-   Lecture follow-up\n    -   Provide the same content from the lecture as follow up exercises\n-   Provide immediate and meaningful feedback at scale\n\n## Self learning\n\n-   Learn by doing\n-   Package tutorials\n-   Workshop follow ups\n\n# How?\n\n------------------------------------------------------------------------\n\n## Topics\n\n-   Question types\n\n-   **gradethis** for automated feedback\n\n-   Writing effective questions\n\n-   Sharing with students\n\n-   Recording student responses - include this (?)\n\n------------------------------------------------------------------------\n\n## Getting started: .qmd ‚û°Ô∏è .rmd\n\n-   Learnr tutorials are written in an R Markdown document (`.rmd`)\n\n-   The syntax and structure is very similar to a Quarto document (`.qmd`)\n\n-   These documents primarily differ in some of the arguments in the YAML\n\n## YAML for learnr tutorial\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"Learnr Demo\"\noutput: \n  learnr::tutorial:\n    progressive: true\n    allow_skip: true\n    css: \"css/style.css\" \nruntime: shiny_prerendered\n---\n```\n:::\n\n\n-   `runtime: shiny_prerendered`: Turns R Markdown into interactive app\n-   `progressive: true`: Display one subsection at a time\n-   `allow_skip: true`: Able to skip exercises in a section\n-   `css: \"css/style.css\"`: Apply custom formatting\n\n# Demo\n\n## Follow along\n\nFollow along options:\n\n-   Local:\n\n    -   In RStudio, install and load the **learnr, gradethis*,*** and **sortable** packages\n    -   Access the source file for the tutorial on GitHub: [github.com/matackett/learnr-demo](https://github.com/matackett/learnr-demo)\n\n-   Cloud: Go to the workspace for this course and start the assignment called **04 - Learnr**.\n\n-   Deployed tutorial: <https://matackett.shinyapps.io/learnr-demo>\n\n## Writing questions\n\n-   **Question types**\n    -   Multiple choice\n    -   Coding exercises\n    -   Sorting questions\n-   **Writing effective questions**\n\n## Grading coding exercises\n\nThe [gradethis](https://pkgs.rstudio.com/gradethis/) package makes it feasible to check coding exercises in a learnr tutorial. There are two basic methods for checking:\n\n-   `grade_this_code()`: Compare student code to model code (strict check)\n\n-   `grade_this()`: Compare student result to model result (flexible check)\n\n## Your turn!\n\n::: callout-important\nCreate a tutorial with three questions:\n\n-   one multiple choice\n\n-   one coding exercise\n\n-   one sortable question\n\nYou can write your responses in **Part 5: Your Turn!** in the learnr demo. It is OK if each question requires code, but that is not required.\n\n**Stretch goal:** Add hints and solution checking to the coding exercise.\n:::\n\n## Sharing with students\n\n-   Deploy on\n\n    -   [shinapps.io](https://www.shinyapps.io/)\n    -   RStudio Connect (free for academic use)\n\n-   Distribute tutorials as a package\n\n    -   [dsbox R package](https://github.com/rstudio-education/dsbox) includes set of learnr tutorials\n\n    -   We will talk about developing packages in a later session\n\n# Recording student responses\n\n## \"Minute paper\"\n\nAdd a link to a form at the end of the tutorial for a \"minute paper\"\n\n::: callout-important\n-   *Write about one or two questions you didn't get right initially but were able to solve after a few tries. What was difficult about them? What did you ultimately learn?*\n\nOR\n\n-   *If you got every single question correct on the first try, write one question you would still like clarified on the topics covered in this quiz.*\n:::\n\n------------------------------------------------------------------------\n\n## Collect response via learnrhash \n\n-   Is there time to include this?\n\n## Learn more!\n\n-   Add some resources\n\n# Workshop check in \n\n\n---\n\n::: callout-important\nWe have completed Day 01! Please answer the following using your sticky notes:\n\n-   XX sticky note: What is going well / what has been your favorite part of the workshop so far?\n\n-   XX sticky note: What is still unclear or confusing?\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}