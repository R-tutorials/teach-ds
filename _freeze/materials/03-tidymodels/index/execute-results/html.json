{
  "hash": "d37177ef09e04db0abb306fc3a330cf6",
  "result": {
    "markdown": "---\ntitle: \"Teaching modern modeling with tidymodels\"\nsubtitle: \"rstudio::conf(2022) <br> Designing the data science classroom\"\nauthor: \"Maria Tackett\"\nfooter: \"[🔗 rstd.io/teach-ds-conf22](https://rstd.io/teach-ds-conf22)\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: ../slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: true\n    incremental: false \n    chalkboard: true\n    center: true\nexecute:\n  freeze: auto\n---\n\n\n# In progress\n\n::: callout-warning\nThese slides are currently being designed and built.\n:::\n\n## Session outline\n\n\n::: {.cell}\n\n:::\n\n\n# Teaching modern modeling\n\n## Course context\n\n## GAISE Guidelines\n\n-   Teach statistical thinking.\n    -   Teach statistics as an investigative process of problem-solving and decision-making.\n    -   Give students experience with multivariable thinking.\n-   Integrate real data with a context and purpose.\n-   Foster active learning.\n-   Use technology to explore concepts and analyze data.\n\n[Guidelines for Assessment and Instruction in Statistics Education (GAISE) 2016 Report](https://www.amstat.org/docs/default-source/amstat-documents/gaisecollege_full.pdf)\n\n## Teaching modern regression\n\nFacilitate opportunities for students to...\n\n::: incremental\n-   Regularly engage with **real-world applications and complex data**\n\n-   Develop proficiency **using professional statistical software** and using a reproducible workflow\n\n-   Identify **appropriate methods based on the primary analysis objective** - inference or prediction\n\n-   Develop important non-technical skills, specifically written communication and teamwork\n:::\n\n## Discussion\n\n-   How much do you teach regression in your course(s)?\n\n-   Do you currently implement any of these principles in your teaching? Do you find some more challenging to implement than others?\n\n# Introducing tidymodels\n\n## Tidymodels\n\n::: columns\n::: {.column width=\"40%\"}\n![](images/hello-tidymodels.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"60%\"}\nThe **tidymodels** framework is a collection of packages for modeling and machine learning using tidyverse principles.\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidymodels\")\n```\n:::\n\n:::\n:::\n\n## Tidymodels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ────────────────────────────────────── tidymodels 0.2.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ broom        0.8.0     ✔ rsample      0.1.1\n✔ dials        0.1.1     ✔ tune         0.2.0\n✔ infer        1.0.2     ✔ workflows    0.2.6\n✔ modeldata    0.1.1     ✔ workflowsets 0.2.1\n✔ parsnip      0.2.1     ✔ yardstick    0.0.9\n✔ recipes      0.2.0     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n```\n:::\n:::\n\n\n## Data: Loans from Lending Club\n\n\\[Write introduction to the data\\] and the variables. Partially follow analysis in Chapter 8 - Linear regression with multiple predictors in [Introduction to Modern Statistics](https://openintro-ims.netlify.app/index.html).\n\n## Data: Loans from Lending Club\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openintro)\nglimpse(loans_full_schema)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10,000\nColumns: 55\n$ emp_title                        <chr> \"global config engineer \", \"warehouse…\n$ emp_length                       <dbl> 3, 10, 3, 1, 10, NA, 10, 10, 10, 3, 1…\n$ state                            <fct> NJ, HI, WI, PA, CA, KY, MI, AZ, NV, I…\n$ homeownership                    <fct> MORTGAGE, RENT, RENT, RENT, RENT, OWN…\n$ annual_income                    <dbl> 90000, 40000, 40000, 30000, 35000, 34…\n$ verified_income                  <fct> Verified, Not Verified, Source Verifi…\n$ debt_to_income                   <dbl> 18.01, 5.04, 21.15, 10.16, 57.96, 6.4…\n$ annual_income_joint              <dbl> NA, NA, NA, NA, 57000, NA, 155000, NA…\n$ verification_income_joint        <fct> , , , , Verified, , Not Verified, , ,…\n$ debt_to_income_joint             <dbl> NA, NA, NA, NA, 37.66, NA, 13.12, NA,…\n$ delinq_2y                        <int> 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0…\n$ months_since_last_delinq         <int> 38, NA, 28, NA, NA, 3, NA, 19, 18, NA…\n$ earliest_credit_line             <dbl> 2001, 1996, 2006, 2007, 2008, 1990, 2…\n$ inquiries_last_12m               <int> 6, 1, 4, 0, 7, 6, 1, 1, 3, 0, 4, 4, 8…\n$ total_credit_lines               <int> 28, 30, 31, 4, 22, 32, 12, 30, 35, 9,…\n$ open_credit_lines                <int> 10, 14, 10, 4, 16, 12, 10, 15, 21, 6,…\n$ total_credit_limit               <int> 70795, 28800, 24193, 25400, 69839, 42…\n$ total_credit_utilized            <int> 38767, 4321, 16000, 4997, 52722, 3898…\n$ num_collections_last_12m         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ num_historical_failed_to_pay     <int> 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ months_since_90d_late            <int> 38, NA, 28, NA, NA, 60, NA, 71, 18, N…\n$ current_accounts_delinq          <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ total_collection_amount_ever     <int> 1250, 0, 432, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ current_installment_accounts     <int> 2, 0, 1, 1, 1, 0, 2, 2, 6, 1, 2, 1, 2…\n$ accounts_opened_24m              <int> 5, 11, 13, 1, 6, 2, 1, 4, 10, 5, 6, 7…\n$ months_since_last_credit_inquiry <int> 5, 8, 7, 15, 4, 5, 9, 7, 4, 17, 3, 4,…\n$ num_satisfactory_accounts        <int> 10, 14, 10, 4, 16, 12, 10, 15, 21, 6,…\n$ num_accounts_120d_past_due       <int> 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, …\n$ num_accounts_30d_past_due        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ num_active_debit_accounts        <int> 2, 3, 3, 2, 10, 1, 3, 5, 11, 3, 2, 2,…\n$ total_debit_limit                <int> 11100, 16500, 4300, 19400, 32700, 272…\n$ num_total_cc_accounts            <int> 14, 24, 14, 3, 20, 27, 8, 16, 19, 7, …\n$ num_open_cc_accounts             <int> 8, 14, 8, 3, 15, 12, 7, 12, 14, 5, 8,…\n$ num_cc_carrying_balance          <int> 6, 4, 6, 2, 13, 5, 6, 10, 14, 3, 5, 3…\n$ num_mort_accounts                <int> 1, 0, 0, 0, 0, 3, 2, 7, 2, 0, 2, 3, 3…\n$ account_never_delinq_percent     <dbl> 92.9, 100.0, 93.5, 100.0, 100.0, 78.1…\n$ tax_liens                        <int> 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ public_record_bankrupt           <int> 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0…\n$ loan_purpose                     <fct> moving, debt_consolidation, other, de…\n$ application_type                 <fct> individual, individual, individual, i…\n$ loan_amount                      <int> 28000, 5000, 2000, 21600, 23000, 5000…\n$ term                             <dbl> 60, 36, 36, 36, 36, 36, 60, 60, 36, 3…\n$ interest_rate                    <dbl> 14.07, 12.61, 17.09, 6.72, 14.07, 6.7…\n$ installment                      <dbl> 652.53, 167.54, 71.40, 664.19, 786.87…\n$ grade                            <fct> C, C, D, A, C, A, C, B, C, A, C, B, C…\n$ sub_grade                        <fct> C3, C1, D1, A3, C3, A3, C2, B5, C2, A…\n$ issue_month                      <fct> Mar-2018, Feb-2018, Feb-2018, Jan-201…\n$ loan_status                      <fct> Current, Current, Current, Current, C…\n$ initial_listing_status           <fct> whole, whole, fractional, whole, whol…\n$ disbursement_method              <fct> Cash, Cash, Cash, Cash, Cash, Cash, C…\n$ balance                          <dbl> 27015.86, 4651.37, 1824.63, 18853.26,…\n$ paid_total                       <dbl> 1999.330, 499.120, 281.800, 3312.890,…\n$ paid_principal                   <dbl> 984.14, 348.63, 175.37, 2746.74, 1569…\n$ paid_interest                    <dbl> 1015.19, 150.49, 106.43, 566.15, 754.…\n$ paid_late_fees                   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n\n## Regression syntax\n\nFit a linear regression model to predict the interest rate using the debt to income ratio.\n\n::: panel-tabset\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_lm <- lm(interest_rate ~ debt_to_income, data = loans_full_schema)\n\nsummary(base_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = interest_rate ~ debt_to_income, data = loans_full_schema)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-21.7391  -3.7203  -0.7945   2.7351  18.6274 \n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    11.511445   0.080732  142.59   <2e-16 ***\ndebt_to_income  0.047183   0.003302   14.29   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.948 on 9974 degrees of freedom\n  (24 observations deleted due to missingness)\nMultiple R-squared:  0.02007,\tAdjusted R-squared:  0.01997 \nF-statistic: 204.2 on 1 and 9974 DF,  p-value: < 2.2e-16\n```\n:::\n:::\n\n\n## Tidymodels\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_lm <- linear_reg() |> \n  set_engine(\"lm\") |>\n  fit(interest_rate ~ debt_to_income, data = loans_full_schema)\n\ntidy(tidy_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term           estimate std.error statistic  p.value\n  <chr>             <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)     11.5      0.0807      143.  0       \n2 debt_to_income   0.0472   0.00330      14.3 7.05e-46\n```\n:::\n:::\n\n:::\n\n## Model summaries using broom\n\nCan utilize functions from the **broom** package to produce tidy summaries of models fit using Base R or the tidymodels framework\n\n-   `tidy()`: summarizes information about model components\n\n-   `glance()`: reports information about the entire model\n\n-   `augment()`: adds informations about observations to a dataset\n\n<br>\n\n[broom.tidymodels.org](https://broom.tidymodels.org/)\n\n## `tidy()`\n\n::: panel-tabset\n## `Base R`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase_lm <- lm(interest_rate ~ debt_to_income, data = loans_full_schema)\ntidy(base_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term           estimate std.error statistic  p.value\n  <chr>             <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)     11.5      0.0807      143.  0       \n2 debt_to_income   0.0472   0.00330      14.3 7.05e-46\n```\n:::\n:::\n\n\n## `Tidymodels`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_lm <- linear_reg() |> \n  set_engine(\"lm\") |>\n  fit(interest_rate ~ debt_to_income, data = loans_full_schema)\ntidy(tidy_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term           estimate std.error statistic  p.value\n  <chr>             <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)     11.5      0.0807      143.  0       \n2 debt_to_income   0.0472   0.00330      14.3 7.05e-46\n```\n:::\n:::\n\n:::\n\n## `glance()`\n\n::: panel-tabset\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglance(base_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1    0.0201        0.0200  4.95      204. 7.05e-46     1 -30105. 60217. 60238.\n# … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n```\n:::\n:::\n\n\n## Tidymodels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglance(tidy_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df  logLik    AIC    BIC\n      <dbl>         <dbl> <dbl>     <dbl>    <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n1    0.0201        0.0200  4.95      204. 7.05e-46     1 -30105. 60217. 60238.\n# … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>\n```\n:::\n:::\n\n:::\n\n## `augment()`\n\n::: panel-tabset\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\nbase_lm_aug <- augment(base_lm)\nbase_lm_aug\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,976 × 9\n   .rownames interest_rate debt_to_income .fitted .resid     .hat .sigma .cooksd\n   <chr>             <dbl>          <dbl>   <dbl>  <dbl>    <dbl>  <dbl>   <dbl>\n 1 1                 14.1           18.0     12.4  1.71  0.000101   4.95 6.02e-6\n 2 2                 12.6            5.04    11.7  0.861 0.000191   4.95 2.89e-6\n 3 3                 17.1           21.2     12.5  4.58  0.000102   4.95 4.36e-5\n 4 4                  6.72          10.2     12.0 -5.27  0.000138   4.95 7.80e-5\n 5 5                 14.1           58.0     14.2 -0.176 0.000765   4.95 4.86e-7\n 6 6                  6.72           6.46    11.8 -5.10  0.000174   4.95 9.22e-5\n 7 7                 13.6           23.7     12.6  0.962 0.000109   4.95 2.06e-6\n 8 8                 12.0           16.2     12.3 -0.285 0.000105   4.95 1.74e-7\n 9 9                 13.6           36.5     13.2  0.357 0.000232   4.95 6.04e-7\n10 10                 6.71          18.9     12.4 -5.69  0.000100   4.95 6.64e-5\n# … with 9,966 more rows, and 1 more variable: .std.resid <dbl>\n```\n:::\n:::\n\n\n## Tidymodels \n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1\"}\ntidy_lm_aug <- augment(tidy_lm$fit)\ntidy_lm_aug\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,976 × 9\n   .rownames interest_rate debt_to_income .fitted .resid     .hat .sigma .cooksd\n   <chr>             <dbl>          <dbl>   <dbl>  <dbl>    <dbl>  <dbl>   <dbl>\n 1 1                 14.1           18.0     12.4  1.71  0.000101   4.95 6.02e-6\n 2 2                 12.6            5.04    11.7  0.861 0.000191   4.95 2.89e-6\n 3 3                 17.1           21.2     12.5  4.58  0.000102   4.95 4.36e-5\n 4 4                  6.72          10.2     12.0 -5.27  0.000138   4.95 7.80e-5\n 5 5                 14.1           58.0     14.2 -0.176 0.000765   4.95 4.86e-7\n 6 6                  6.72           6.46    11.8 -5.10  0.000174   4.95 9.22e-5\n 7 7                 13.6           23.7     12.6  0.962 0.000109   4.95 2.06e-6\n 8 8                 12.0           16.2     12.3 -0.285 0.000105   4.95 1.74e-7\n 9 9                 13.6           36.5     13.2  0.357 0.000232   4.95 6.04e-7\n10 10                 6.71          18.9     12.4 -5.69  0.000100   4.95 6.64e-5\n# … with 9,966 more rows, and 1 more variable: .std.resid <dbl>\n```\n:::\n:::\n\n:::\n\n## Why full tidymodels framework? \n\nMost pedagogical advantages for more advanced models:\n\n-   Consistent syntax for different model types (linear, logistic, random forest, Bayesian, etc.\n-   Streamline modeling workflow\n    -   Split data into train and test sets\n    -   Create custom variables\n    -   Assess model performance\n    -   Use model for prediction and inference\n\n# Teaching with tidymodels\n\n## Getting started\n\nLet's breakdown the syntax from the previous example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |> \n  set_engine(\"lm\") |>\n  fit(interest_rate ~ debt_to_income, data = loans_full_schema) |>\n  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term           estimate std.error statistic  p.value\n  <chr>             <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)     11.5      0.0807      143.  0       \n2 debt_to_income   0.0472   0.00330      14.3 7.05e-46\n```\n:::\n:::\n\n\n## 1️⃣ Specify model \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\n## 2️⃣ Set computational engine\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |> \n  set_engine(\"lm\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n:::\n:::\n\n\n## 3️⃣ Fit the model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |> \n  set_engine(\"lm\") |>\n  fit(interest_rate ~ debt_to_income, data = loans_full_schema)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nparsnip model object\n\n\nCall:\nstats::lm(formula = interest_rate ~ debt_to_income, data = data)\n\nCoefficients:\n   (Intercept)  debt_to_income  \n      11.51145         0.04718  \n```\n:::\n:::\n\n\n## 4️⃣ Summarize output\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |> \n  set_engine(\"lm\") |>\n  fit(interest_rate ~ debt_to_income, data = loans_full_schema) |>\n  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 5\n  term           estimate std.error statistic  p.value\n  <chr>             <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)     11.5      0.0807      143.  0       \n2 debt_to_income   0.0472   0.00330      14.3 7.05e-46\n```\n:::\n:::\n\n\n## Feature engineering\n\n**Feature engineering** is the process of transforming raw variables in preparation for use in a statistical model.\n\n<br>\n\n. . .\n\nWe may be familiar doing feature engineering using dplyr before fitting the model.\n\n<br>\n\n. . .\n\nThe [recipes](https://recipes.tidymodels.org/) package makes it possible to do feature engineering as part of the modeling workflow using \"dplyr-like\" functions.\n\n## Example: Predicting interest rate\n\n**Goal**: Fit a model to predict the interest rate from the term, debt to income ratio, home ownership, and number of delinquencies in past two years.\n\n<br>\n\n. . .\n\nWe need to do the following to prepare the predictors for the model:\n\n-   Make `term` a factor.\n-   Mean-center `debt_to_income`.\n-   Break `delinq_2y` into the categories 0, 1, 2, 3+.\n\n## Feature engineering using dplyr\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the data\nloans_full_schema <- loans_full_schema |>\n  mutate(term = as_factor(term)) |>\n  mutate(debt_to_income_cent = debt_to_income - mean(debt_to_income, na.rm = TRUE)) |>\n  mutate(delinq_2y_cat = cut(delinq_2y, breaks = c(0, 1, 2, 3, Inf), right = FALSE))\n\n# Fit the model \nlm(interest_rate ~ term + debt_to_income_cent + homeownership + delinq_2y_cat, data = loans_full_schema) |>\n  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 5\n  term                 estimate std.error statistic  p.value\n  <chr>                   <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)           10.3      0.0780     132.   0       \n2 term60                 4.03     0.0997      40.4  0       \n3 debt_to_income_cent    0.0462   0.00304     15.2  1.80e-51\n4 homeownershipOWN       0.726    0.140        5.18 2.31e- 7\n5 homeownershipRENT      1.49     0.0994      15.0  1.55e-50\n6 delinq_2y_cat[1,2)     1.49     0.151        9.83 1.04e-22\n7 delinq_2y_cat[2,3)     1.81     0.288        6.29 3.23e-10\n8 delinq_2y_cat[3,Inf)   2.76     0.368        7.49 7.28e-14\n```\n:::\n:::\n\n\n## Feature engineering with recipes\n\n![Illustration by [Allison Horst](https://www.allisonhorst.com/)](images/recipes.png){fig-align=\"center\"}\n\n## Feature engineering with recipes\n\n-   Write code step by step\n\n-   Put all steps in a single pipeline\n\n## Featuring engineering with recipes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define workflow \n\ninterest_rec <- recipe(interest_rate ~ term + debt_to_income + \n                         homeownership + delinq_2y, \n                       data = loans_full_schema)\n```\n:::\n\n\n## recipes vs. dplyr \n\n-   show code side by side\n\n-   advantages / disadvantage of each approach\n\n## Put it together with workflow \n\n-   Define the model\n\n-   Define the receipe\n\n## Exercise - feature engineering\n\n-   Have an qmd file with the dplyr pipeline.\n\n-   Go to the receipes documentation and try to find the appropriate step functions.\n\n-   Was this easy to do? Why or why not? What was easy? What was challenging?\n\n## Prediction\n\n## Test vs. Train data\n\n## Prediction exercise\n\n## Thinking about prediction or inference\n\n## Exercise - split into test and train?\n\n## Cross-validation\n\n## Exercise - cross validation\n\n# Using tidydmodels in your course\n\n## Pedagogical advantages\n\n## Putting it all together\n\n-   Make an Rmd file with a full pipeline to show this is what your students would be able to do at the end of the semester.\n\n## Activity / Discussion\n\n-   Think about how you might implement this in the classroom\n\n-   What is a potential challenge\n\n-   Write an activity\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}