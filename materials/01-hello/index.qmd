---
title: "Hello #teachds"
subtitle: "rstudio::conf(2022) <br> Designing the data science classroom"
author: "Mine Ã‡etinkaya-Rundel + Maria Tackett"
footer: "[ðŸ”— rstd.io/teach-ds-conf22](https://rstd.io/teach-ds-conf22) / Module 1"
logo: "../images/logo.png"
format: 
  revealjs:
    theme: ../slides.scss
    multiplex: true
    transition: fade
    slide-number: true
    incremental: false 
    chalkboard: true
execute:
  freeze: auto
  echo: true
knitr:
  opts_chunk: 
    R.options:
      width: 200
---

# Welcome

```{r}
#| include: false

library(unvotes)
library(tidyverse)
library(openintro)
library(countdown)
library(infer)
```

## Introductions

::: columns
::: {.column width="50%"}
![](images/mine.png){fig-alt="Dr. Mine Cetinkaya-Rundel" fig-align="center"}
:::

::: {.column width="50%"}
![](images/maria.png){fig-alt="Dr. Maria Tackett" fig-align="center"}
:::
:::

::: {style="text-align: center;"}
Dr. Mine Ã‡etinkaya-Rundel

Dr. Maria Tackett
:::

## Teaching Assistants

-   Becky Tang - Duke University
-   Simon Couch - RStudio

## Your turn!

::: question
Introduce yourselves:

-   Name
-   Affiliation and/or where you're joining from (geographically)
-   Where you are in your teaching (or learning) journey
-   Your favourite thing to teach
:::

## Workshop materials

![](../images/logo.png){fig-alt="Hex logo for workshop" fig-align="center" width="20%"}

::: {style="text-align: center;"}
One link for all materials

ðŸ”— <https://rstd.io/teach-ds-conf22>
:::

## Schedule {.small}

::: columns
::: {.column width="45%"}
### Day 1

| Time          | Activity                                         |
|:--------------|:-------------------------------------------------|
| 09:00 - 10:30 | Hello #teachds                                   |
| 10:30 - 11:00 | *Coffee break*                                   |
| 11:00 - 12:30 | Teaching data science with the tidyverse         |
| 12:30 - 13:30 | *Lunch break*                                    |
| 13:30 - 15:00 | Teaching modern modeling with tidymodels         |
| 15:00 - 15:30 | *Coffee break*                                   |
| 15:30 - 17:00 | Interactivity and immediate feedback with learnr |
:::

::: {.column width="5%"}
:::

::: {.column width="50%"}
### Day 2

| Time          | Activity                                      |
|:--------------|:----------------------------------------------|
| 09:00 - 10:30 | Computing infrastructure with RStudio Cloud   |
| 10:30 - 11:00 | *Coffee break*                                |
| 11:00 - 12:30 | Reproducible workflows: Quarto, Git, GitHub   |
| 12:30 - 13:30 | *Lunch break*                                 |
| 13:30 - 15:00 | Making a data package                         |
| 15:00 - 15:30 | *Coffee break*                                |
| 15:30 - 17:00 | Organizing teaching materials + Wrap-up / Q&A |
:::
:::

## WiFi

::: larger
Username: **conf22**

Password: **together!**
:::

<br><br>

::: aside
If you have any difficulty with your connection please let us (myself and or the TAs) know so we can escalate issues if needed.
:::

## Code of Conduct {.small}

All details are available at https://www.rstudio.com/conference/2022/2022-conf-code-of-conduct/. Please review them carefully.

You can report Code of Conduct violations in person (any rstudio::conf staff ), by email ([conf\@rstudio.com](mailto:conf@rstudio.com)), or by phone (844-448-1212). Please see the policy linked above for contact information.

Covid19 specific policies:

-   RStudio requires that you wear a mask that fully covers your mouth and nose at all times in all public spaces.

-   We strongly recommend that you use a correctly fitted N95, KN95, or similar particulate filtering mask; there is a limited supply available upon request.

## Other useful info

-   There are gender neutral bathrooms by the National Harbor rooms.

-   The meditation room is located at National Harbor 9. Open 8am - 5pm, Monday - Thursday. The hotel also has a dedicated room behind the reception.

-   The lactation room is located at Potomac Dressing Room. Open 8am - 5pm, Monday - Thursday.

-   Participants who do not wish to be photographed have red lanyards, please note everyone's lanyard colors before taking a photo and respect their choices.

## Asking for help (Stickies)

::: r-hstack
::: {style="text-align: center;"}
::: {data-id="box1" style="background: #FFA500; width: 200px; height: 200px; margin: 25px;"}
:::

I'm stuck
:::

::: {style="text-align: center;"}
::: {data-id="box3" style="background: #BF40BF; width: 200px; height: 200px; margin: 25px;"}
:::

I'm done
:::
:::

::: r-hstack
::: {style="text-align: center;"}
![](images/hand.png){fig-align="center" width="20%"} <br/>I have a general question
:::
:::

## Discord

You should have received an email with an invitation and instructions for joining the conference's discord server.

This workshop has a private channel under Workshops:

::: {.large style="text-align: center"}
\#ðŸ“šdesigning-the-data-science-classroom
:::

This is a great place to ask questions, share responses to exercises, post resources, memes, or most anything else before, during, and after the workshop.

::: {.callout-important appearance="simple"}
Take a minute to

-   Join the Discord server for conf: [https://discord.gg/FRxNvG7KP9](discord.gg/FRxNvG7KP9).
-   If you're already in, let us know if you're not in the channel for this workshop.
:::

# Computational Environment

## RStudio Cloud

You can use the following link to join the workshops RStudio cloud space,

<br>

::: {style="text-align: center;"}
[rstd.io/teach-ds-conf22-cloud](https://rstd.io/teach-ds-conf22-cloud)
:::

<br>

Once you have joined, navigate to Projects on the top menu.

## Using your own system

If you'd like to use your own system, please see [https://rstudio-conf-2022.github.io/teach-ds/#install](rstudio-conf-2022.github.io/teach-ds/#install).

# Principles for designing introductory data science curricula

## Baking a cake {.center}

Imagine you're new to baking, and you're in a baking class. I'm going to present two options for starting the class. Which one gives you **better sense** of the final product?

## Baking a cake

::: columns
::: {.column width="50%"}
Today we're going to make a pineapple and coconut sandwich sponge cake with these ingredients
:::

::: {.column width="50%"}
![](images/cake-ingredients.png)
:::
:::

## Baking a cake

::: columns
::: {.column width="50%"}
Today we're going to make a pineapple and coconut sandwich sponge cake with these ingredients
:::

::: {.column width="50%"}
![](images/cake-result.png)
:::
:::

## OK, hold on to that thought! {.center}

## Design foundation 1: Backwards design

Set goals for educational curriculum before choosing instructional methods + forms ofÂ assessment

1.  Identify desired results
2.  Determine acceptable evidence
3.  Plan learning experiences and instruction

::: aside
Wiggins, Grant P., Grant Wiggins, and Jay McTighe.Â  Understanding by design. Ascd, 2005.
:::

## Designing backwards

::: incremental
1.  Identify desired **data analysis** results
2.  Determine **building blocks**
3.  Plan learning experiences and instruction
:::

## Design foundation 2: GAISE {.small}

2016 Guidelines for Assessment and Instruction in Statistics Education

1.  Teach statistical thinking.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to investigate and explore relationships among many variables.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  Use technology to explore concepts and analyse data.
6.  Use assessments to improve and evaluate student learning.

::: aside
[amstat.org/asa/files/pdfs/GAISE/GaiseCollege_Full.pdf](https://www.amstat.org/asa/files/pdfs/GAISE/GaiseCollege_Full.pdf)
:::

## 2016 GAISE {.small}

::: columns
::: {.column width="70%"}
1.  Teach **statistical thinking**.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to investigate and explore relationships among many variables.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  Use technology to explore concepts and analyse data.
6.  Use assessments to improve and evaluate student learning.
:::

::: {.column width="30%"}
NOT a commonly used subset of tests and intervals and produce them with hand calculations
:::
:::

## 2016 GAISE {.small}

::: columns
::: {.column width="70%"}
1.  Teach statistical thinking.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to **investigate and explore relationships among many variables**.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  Use technology to explore concepts and analyse data.
6.  Use assessments to improve and evaluate student learning.
:::

::: {.column width="30%"}
Multivariate analysis requires the use of computing
:::
:::

## 2016 GAISE {.small}

::: columns
::: {.column width="70%"}
1.  Teach statistical thinking.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to investigate and explore relationships among many variables.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  **Use technology** to explore concepts and analyse data.
6.  Use assessments to improve and evaluate student learning.
:::

::: {.column width="30%"}
NOT use technology that is only applicable in the intro course or that doesn't follow good science principles
:::
:::

## 2016 GAISE {.small}

::: columns
::: {.column width="70%"}
1.  Teach statistical thinking.
    -   Teach statistics as an investigative process of problem-solving and decision making.

    -   Give students experience with multivariable thinking \[...\] to answer challenging questions that require them to investigate and explore relationships among many variables.

<!-- -->

2.  Focus on conceptual understanding.
3.  Integrate real data with a context and purpose.
4.  Foster active learning.
5.  Use technology to explore concepts and **analyse data**.
6.  Use assessments to improve and evaluate student learning.
:::

::: {.column width="30%"}
Data analysis isn't just inference and modelling, it's also data importing, cleaning, preparation, exploration, and visualization
:::
:::

## So, where do we go with all this?

![](images/course-units.png)

## Discussion

::: question
Discuss in pairs and then as a large group.

-   What are your first reactions to the curriculum we just described for an intro data science course?
-   Which components can you see yourself (or do you already) include in an intro data science curriculum?
-   Which components do you have reservations about, and why?
:::

```{r echo=FALSE}
countdown(minutes = 5, font_size = "1.5em")
```

## Which kitchen would you rather bake in?

::: columns
::: {.column width="50%"}
![](images/kitchen-inrepair.png)
:::

::: {.column width="50%"}
![](images/kitchen-built.png)
:::
:::

## Design principle 1: Cherish day one

::: columns
::: {.column width="50%"}
-   Install R
-   Install RStudio
-   Install the following packages:
    -   tidyverse
    -   rmarkdown
    -   ...
-   Load these packages
-   Install git
:::

::: {.column width="50%"}
-   Go to rstudio.cloud (or some other server based solution)
-   Log in with your ID & pass

```{r hello-R, eval=FALSE}
> hello R!
```
:::
:::

## Your turn: UN Votes

::: cloud
{{< fa cloud >}} Go to rstd.io/teach-ds-conf22-cloud to join the RStudio Cloud workspace for this workshop > Log in > Project (top left) > Start "Module 1 - Hello" > ex-1-1.qmd
:::

::: appex
Open the Quarto document called `ex-1-1.qmd`, render the document, view the result. Then, change "Turkey" to another country, and render again.
:::

::: share
{{< fa user-group >}} Discuss with your neighbor:

-   As a student: Why did you choose the country you chose?
-   As an instructor: What went smoothly in the exercise? What didn't? What would you add to the instructions? What would you take away?
:::

```{r}
#| echo: false

countdown(minutes = 15, font_size = "1.5em")
```

## How do you prefer your cake recipes? Words only, or words & pictures?

::: columns
::: {.column width="50%"}
![](images/recipe-picture.png)
:::

::: {.column width="50%"}
![](images/recipe-words.png)
:::
:::

## Design principle 2: Start with cake

::: columns
::: {.column width="50%"}
-   Open today's demo project
-   Knit the document and discuss the visualisation you made with your neighbor
-   Then, change `Turkey` to a different country, and plot again
:::

::: {.column width="50%"}
```{r}
#| label: recipe-words-code

x <- 8
y <- "monkey"
z <- FALSE

class(x)
class(y)
class(z)
```
:::
:::

## Practically speaking...

-   With with great examples, comes a great amount of code...
-   So explicitly encourage students to focus on the task at hand

::: appex
-   Open today's demo project
-   Knit the document and discuss the visualization you made with your neighbor
-   Then, **change `Turkey` to a different country, and plot again**
:::

## Focusing on the task at hand

```{r}
#| label: unvotes-code-1
#| eval: false

un_votes |>
  filter(country %in% c("United States", "Turkey")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(issue = ifelse(issue == "Nuclear weapons and nuclear material",
                        "Nuclear weapons and materials", issue)) |>
  group_by(country, year = year(date), issue) |>
  summarize(
    votes = n(),
    percent_yes = mean(vote == "yes")
    ) |>
  filter(votes > 5) |>
  ggplot(mapping = aes(x = year, y = percent_yes, color = country)) +
    geom_point() +
    geom_smooth(method = "loess", se = FALSE) +
    facet_wrap(~ issue) +
    labs(
      title = "Percentage of Yes votes in the UN General Assembly",
      subtitle = "1946 to 2015",
      y = "% Yes",
      x = "Year",
      color = "Country"
    )
```

## Focusing on the task at hand

```{r}
#| label: unvotes-code-2
#| eval: false
#| code-line-numbers: "2"

un_votes |>
  filter(country %in% c("United States", "Turkey")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  group_by(country, year = year(date), issue) |>
  summarize(
    votes = n(),
    perc_yes = mean(vote == "yes")
    ) |>
  filter(votes > 5) |>
  ggplot(mapping = aes(x = year, y = perc_yes, color = country)) +
    geom_point() +
    geom_smooth(method = "loess", se = FALSE) +
    facet_wrap(~ issue) +
    labs(
      title = "Percentage of Yes votes in the UN General Assembly",
      subtitle = "1946 to 2015",
      y = "% Yes", x = "Year", color = "Country"
    )
```

## Focusing on the task at hand

```{r}
#| label: unvotes-code-3
#| eval: false
#| code-line-numbers: "2"

un_votes |>
  filter(country %in% c("United States", "France")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  group_by(country, year = year(date), issue) |>
  summarize(
    votes = n(),
    perc_yes = mean(vote == "yes")
    ) |>
  filter(votes > 5) |>
  ggplot(mapping = aes(x = year, y = perc_yes, color = country)) +
    geom_point() +
    geom_smooth(method = "loess", se = FALSE) +
    facet_wrap(~ issue) +
    labs(
      title = "Percentage of Yes votes in the UN General Assembly",
      subtitle = "1946 to 2015",
      y = "% Yes", x = "Year", color = "Country"
    )
```

## Your turn: Exercise design {.small}

::: cloud
{{< fa cloud >}} RStudio Cloud > "Module 1 - Hello" > ex-1-2.qmd
:::

::: appex
-   Your challenge is to go from nothing to a data visualization in 15 minutes of your first class. Don't worry about the computing infrastructure (we'll get to that later in the day), assume students have successfully landed in RStudio Cloud like you did earlier. Design an exercise for them to "create" their first visualization.
-   If you need inspiration, you can use the `ggplot2::diamonds` or `dplyr::starwars` dataset or any dataset from `nycflights13` or `gapminder` packages.
-   If you already have a first day exercise you like, you're welcomed to modify it to fit the challenge: from nothing to a data visualization in 15 minutes!
:::

::: share
{{< fa user-group >}} Compare notes with your neighbor. {{< fa brands discord >}} Share your exercise on Discord.
:::

```{r}
#| echo: false

countdown(minutes = 15, font_size = "1.5em")
```

## Which motivates you more to learn how to cook: perfectly chopped onions or ratatouille?

::: columns
::: {.column width="50%"}
![](images/chop-onions.png)
:::

::: {.column width="50%"}
![](images/make-ratatouille.png)
:::
:::

## Design principle 3: Skip baby steps

::: columns
::: {.column width="50%"}
```{r}
#| label: unvotes-univariate
#| echo: false
#| warning: false

ggplot(un_roll_calls, aes(x = amend)) +
  geom_bar()
```
:::

::: {.column width="50%"}
```{r}
#| label: unvotes-multivariate
#| echo: false

un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    ) |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN",
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
  ) +
  theme_minimal() +
  scale_fill_viridis_d(option = "E")
```
:::
:::

## Practically speaking...

-   Non-trivial examples can be motivating, but need to avoid...

::: columns
::: {.column width="30%"}
![](images/owl-step1.png)
:::

::: {.column width="30%"}
![](images/owl-step2.png)
:::
:::

-   Scaffold and layer in between!

## Discussion

::: question
The following code is used to create the multivariate visualisation we saw earlier. How much of the code would you show/hide when just starting teaching ggplot2?
:::

```{r}
#| label: unvotes-multivariate-code
#| eval: false

un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    ) |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN", 
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
    ) +
  theme_minimal() +
  scale_fill_viridis_d(option = "E")
```

```{r}
#| echo: false

countdown(minutes = 5, font_size = "1.5em")
```

## Designing code snippets for teaching

-   Write it out to your heart's desire and polish it

-   Then, split into three parts:

    -   **Pre-process:** Required, but isn't directly connected to / far off from learning goals of current lesson
    -   **Stash:** Not required, and not directly connected to learning goals of current lesson
        -   Likely concepts that fit better into future lessons)
    -   **Feature:** Heart of the lesson (and maybe a review of a previous lessons)

-   Finally, decide on the pace at which to scaffold and layer

## Pre-process

We'll call the highlighted lines `us_votes`

```{r}
#| label: preprocess
#| eval: false
#| code-line-numbers: "1-8"

un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    ) |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN", 
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
    ) +
  theme_minimal() +
  scale_fill_viridis_d(option = "E")
```

## Preprocess

```{r}
#| label: preprocess-eval
#| echo: false

us_votes <- un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    )
```

```{r}
us_votes
```

## Stash

```{r}
#| label: stash
#| eval: false
#| code-line-numbers: "18-19"

un_votes |>
  filter(country %in% c("United States")) |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid") |>
  mutate(
    importantvote = ifelse(importantvote == 0, "No", "Yes"),
    issue = ifelse(issue == "Nuclear weapons and nuclear material", "Nuclear weapons and materials", issue)
    ) |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN", 
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
    ) +
  theme_minimal() +
  scale_fill_viridis_d(option = "E")
```

## Feature

```{r}
#| label: feature
#| eval: false

us_votes |>
  ggplot(aes(y = importantvote, fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN", 
    subtitle = "By issue and importance of vote",
    x = "Important vote", y = "", fill = "Vote"
    )
```

## Scaffold 1

```{r}
#| label: scaffold-layer-1
#| output-location: column

ggplot(data = us_votes)
```

## Scaffold 2

```{r}
#| label: scaffold-layer-2
#| output-location: column
#| code-line-numbers: "2-3"

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote))
```

## Scaffold 3

```{r}
#| label: scaffold-layer-3
#| output-location: column
#| code-line-numbers: "4"

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote)) +
  geom_bar(position = "fill")
```

## Scaffold 4

```{r}
#| label: scaffold-layer-4
#| output-location: column
#| code-line-numbers: "5"

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1)
```

## Scaffold 5

```{r}
#| label: scaffold-layer-5
#| output-location: column
#| code-line-numbers: "6-11"

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN",
    subtitle = "By issue and importance of vote", 
    x = "Important vote", 
    y = "" 
    ) 
```

## Scaffold 6

```{r}
#| label: scaffold-layer-6
#| output-location: column
#| code-line-numbers: "11"

ggplot(data = us_votes, 
  mapping = aes(y = importantvote,
                fill = vote)) +
  geom_bar(position = "fill") +
  facet_wrap(~ issue, ncol = 1) +
  labs(
    title = "How the US voted in the UN",
    subtitle = "By issue and importance of vote", 
    x = "Important vote", 
    y = "",
    fill = "Vote"
    ) 
```

## ~~Skip~~ Re-insert baby steps

![](images/learnr-visualise.png)

## Which is more likely to appeal to someone who has never tried broccoli?

::: columns
::: {.column width="50%"}
![](images/broccoli-raw.png)
:::

::: {.column width="50%"}
![](images/broccoli-cooked.png)
:::
:::

## Design principle 4: Hide the veggies

::: columns
::: {.column width="50%"}
Today we're going to do web scraping

-   Using the **rvest** package
-   And with the help of *regular expressions*
:::

::: {.column width="50%"}
-   Today we go from this to that

![](images/open-secrets-nc.png)

-   and do so in a way that is easy to replicate for another state
:::
:::

## Practically speaking...

-   Students will encounter lots of new challenges along the way
-   Let that happen, and then provide a solution

## Start with a mini-lecture

-   **Lesson:** Web scraping essentials for turning a structured table into a data frame in R.

## Follow up with a hands-on exercise

-   **Lesson:** Web scraping essentials for turning a structured table into a data frame in R.
-   **Ex 1:** Scrape the table off the web and save as a data frame.

![](images/open-secrets-nc-ex1.png)

## And a thought exercise

-   **Lesson:** Web scraping essentials for turning a structured table into a data frame in R.
-   **Ex 1:** Scrape the table off the web and save as a data frame.
-   **Ex 2:** What other information do we need represented as variables in the data to obtain the desired facets?

![](images/open-secrets-nc-ex2.png)

## And finally, the veggies!

-   **Lesson:** Web scraping essentials for turning a structured table into a data frame in R.
-   **Ex 1:** Scrape the table off the web and save as a data frame.
-   **Ex 2:** What other information do we need represented as variables in the data to obtain the desired facets?
-   **Lesson:** "Just enough" string parsing and regular expressions to go from

![](images/open-secrets-nc-ex3.png)

## If you are already taking a baking class, which will be easier to venture on to?

::: columns
::: {.column width="50%"}
![](images/make-pastries.png)
:::

::: {.column width="50%"}
![](images/make-tacos.png)
:::
:::

## Design principle 5: Leverage the ecosystem

Estimate the difference between the average evaluation score of male and female faculty.

::: columns
::: {.column width="50%"}
```{r}
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, 
    type = "bootstrap") |>
  calculate(stat = "diff in means", 
    order = c("male", "female")) |>
  summarise(
    l = quantile(stat, 0.025), 
    u = quantile(stat, 0.975)
    )
```
:::

::: {.column width="50%"}
```{r}
t.test(evals$score ~ evals$gender)
```
:::
:::

## infer $\in$ tidymodels

::: columns
::: {.column width="50%"}
The objective of this package is to perform statistical inference using an expressive statistical grammar that coheres with the tidyverse design framework.
:::

::: {.column width="50%"}
![](images/infer-hex.png)
:::
:::

## infer 1

```{r infer-1}
evals |>
  specify(score ~ gender)
```

## infer 2

```{r infer-2}
set.seed(1234)
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, type = "bootstrap")
```

## infer 3

```{r infer-3}
set.seed(1234)
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, type = "bootstrap") |>
  calculate(stat = "diff in means", order = c("male", "female"))
```

## infer 4

```{r}
set.seed(1234)
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, type = "bootstrap") |>
  calculate(stat = "diff in means", order = c("male", "female")) |>
  visualise()
```

## infer 4

```{r infer-5}
set.seed(1234)
evals |>
  specify(score ~ gender) |>
  generate(reps = 100, type = "bootstrap") |>
  calculate(stat = "diff in means", order = c("male", "female")) |>
  summarise(l = quantile(stat, 0.025), u = quantile(stat, 0.975))
```

## One other way to "leverage the ecosystem"

Do it all in R!

-   Slides, course, course notes / textbook with **Quarto**
-   A student dashboard with **flexdashboard**
-   Git automation with **ghclass**
-   Interactive tutorials with **learnr**
-   ...

# Meet the toolkit

## Course toolkit

::: columns
::: {.column width="50%"}
Workshop operation:

-   rstd.io/teach-ds-conf22
-   Discord
:::

::: {.column width="50%"}
Doing data science:

-   Programming:
    -   R
    -   RStudio
    -   tidyverse
    -   Quarto
-   Version control and collaboration:
    -   Git
    -   GitHub
:::
:::

## Toolkit for reproducibility

-   Scriptability $\rightarrow$ R
-   Literate programming (code, narrative, output in one place) $\rightarrow$ Quarto
-   Version control $\rightarrow$ Git / GitHub

## Quarto

-   Fully reproducible reports -- each time you render the analysis is ran from the beginning
-   A visual editor (just like Google Docs) for authoring
-   Code goes in chunks, narrative goes outside of chunks

## How will we use Quarto?

-   Every exercise is a Quarto document
-   You'll always have a template Quarto document to start with

## Your turn: Bechdel + Quarto

::: cloud
{{< fa cloud >}} RStudio Cloud > "Module 1 - Hello" > ex-1-3.qmd
:::

::: appex
[The Bechdel test](https://en.wikipedia.org/wiki/Bechdel_test) asks whether a work of fiction features at least two women who talk to each other about something other than a man, and there must be two women named characters. Review and render the documnt, then fill in the blanks.
:::

```{r}
#| echo: false

countdown(minutes = 10, font_size = "1.5em")
```
